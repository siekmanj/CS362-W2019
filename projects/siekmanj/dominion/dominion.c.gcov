        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    50469:    8:int compare(const void* a, const void* b) {
    50469:    9:	if (*(int*)a > *(int*)b)
     1266:   10:		return 1;
    49203:   11:	if (*(int*)a < *(int*)b)
    13414:   12:		return -1;
    35789:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:			int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
     2500:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:			 struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
     2500:   44:	SelectStream(1);
     2500:   45:	PutSeed((long)randomSeed);
        -:   46:	
        -:   47:	//check number of players
     2500:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:		{
      655:   50:			return -1;
        -:   51:		}
        -:   52:
        -:   53:	//set number of players
     1845:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
    16815:   57:	for (i = 0; i < 10; i++)
        -:   58:		{
   170868:   59:			for (j = 0; j < 10; j++)
        -:   60:				{
   155898:   61:		if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
      776:   63:				return -1;
        -:   64:			}
        -:   65:				}
        -:   66:		}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
     1069:   73:	if (numPlayers == 2)
        -:   74:		{
      362:   75:			state->supplyCount[curse] = 10;
        -:   76:		}
      707:   77:	else if (numPlayers == 3)
        -:   78:		{
      363:   79:			state->supplyCount[curse] = 20;
        -:   80:		}
        -:   81:	else
        -:   82:		{
      344:   83:			state->supplyCount[curse] = 30;
        -:   84:		}
        -:   85:
        -:   86:	//set number of Victory cards
     1069:   87:	if (numPlayers == 2)
        -:   88:		{
      362:   89:			state->supplyCount[estate] = 8;
      362:   90:			state->supplyCount[duchy] = 8;
      362:   91:			state->supplyCount[province] = 8;
        -:   92:		}
        -:   93:	else
        -:   94:		{
      707:   95:			state->supplyCount[estate] = 12;
      707:   96:			state->supplyCount[duchy] = 12;
      707:   97:			state->supplyCount[province] = 12;
        -:   98:		}
        -:   99:
        -:  100:	//set number of Treasure cards
     1069:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     1069:  102:	state->supplyCount[silver] = 40;
     1069:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
    22449:  106:	for (i = adventurer; i <= treasure_map; i++)				//loop all cards
        -:  107:		{
   177816:  108:			for (j = 0; j < 10; j++)							//loop chosen cards
        -:  109:	{
   166725:  110:		if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
    10289:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2110:  115:			if (numPlayers == 2){ 
      352:  116:				state->supplyCount[i] = 8; 
        -:  117:			}
      703:  118:			else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:				else
        -:  121:		{
     9234:  122:			state->supplyCount[i] = 10;
        -:  123:		}
    10289:  124:				break;
        -:  125:			}
        -:  126:		else		//card is not in the set choosen for the game
        -:  127:			{
   156436:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:	}
        -:  131:
        -:  132:		}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
     4258:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:		{
     3189:  140:			state->deckCount[i] = 0;
    12756:  141:			for (j = 0; j < 3; j++)
        -:  142:	{
     9567:  143:		state->deck[i][j] = estate;
     9567:  144:		state->deckCount[i]++;
        -:  145:	}
    25512:  146:			for (j = 3; j < 10; j++)
        -:  147:	{
    22323:  148:		state->deck[i][j] = copper;
    22323:  149:		state->deckCount[i]++;		
        -:  150:	}
        -:  151:		}
        -:  152:
        -:  153:	//shuffle player decks
     4258:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:		{
     3189:  156:			if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:		return -1;
        -:  159:	}
        -:  160:		}
        -:  161:
        -:  162:	//draw player hands
     4258:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:		{  
        -:  165:			//initialize hand size to zero
     3189:  166:			state->handCount[i] = 0;
     3189:  167:			state->discardCount[i] = 0;
        -:  168:			//draw 5 cards
        -:  169:			// for (j = 0; j < 5; j++)
        -:  170:			//	{
        -:  171:			//		drawCard(i, state);
        -:  172:			//	}
        -:  173:		}
        -:  174:	
        -:  175:	//set embargo tokens to 0 for all supply piles
    29932:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:		{
    28863:  178:			state->embargoTokens[i] = 0;
        -:  179:		}
        -:  180:
        -:  181:	//initialize first player's turn
     1069:  182:	state->outpostPlayed = 0;
     1069:  183:	state->phase = 0;
     1069:  184:	state->numActions = 1;
     1069:  185:	state->numBuys = 1;
     1069:  186:	state->playedCardCount = 0;
     1069:  187:	state->whoseTurn = 0;
     1069:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     6414:  192:	for (it = 0; it < 5; it++){
     5345:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
     1069:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1069:  198:	return 0;
        -:  199:}
        -:  200:
     6830:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
     6830:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
     6830:  209:	if (state->deckCount[player] < 1)
     3558:  210:		return -1;
     3272:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    36125:  214:	while (state->deckCount[player] > 0) {
    32853:  215:		card = floor(Random() * state->deckCount[player]);
    32853:  216:		newDeck[newDeckPos] = state->deck[player][card];
    32853:  217:		newDeckPos++;
   110954:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
    78101:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
    32853:  221:		state->deckCount[player]--;
        -:  222:	}
    36125:  223:	for (i = 0; i < newDeckPos; i++) {
    32853:  224:		state->deck[player][i] = newDeck[i];
    32853:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
     3272:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0;			//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:		{
    #####:  239:			return -1;
        -:  240:		}
        -:  241:	
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:		{
    #####:  245:			return -1;
        -:  246:		}
        -:  247:	
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:	
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:		{
    #####:  254:			return -1;
        -:  255:		}
        -:  256:	
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:		{
    #####:  260:			return -1;
        -:  261:		}
        -:  262:	
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:	
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:		
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:		{
    #####:  330:			if (state->deck[player][i] == card) count++;
        -:  331:		}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:		{
    #####:  335:			if (state->hand[player][i] == card) count++;
        -:  336:		}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:		{
    #####:  340:			if (state->discard[player][i] == card) count++;
        -:  341:		}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
     2500:  346:int whoseTurn(struct gameState *state) {
     2500:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:	
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:		
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:	
        -:  394:	//if stack of Province cards is empty, the game ends
    #####:  395:	if (state->supplyCount[province] == 0)
        -:  396:		{
    #####:  397:			return 1;
        -:  398:		}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
    #####:  401:	j = 0;
    #####:  402:	for (i = 0; i < 25; i++)
        -:  403:		{
    #####:  404:			if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:		j++;
        -:  407:	}
        -:  408:		}
    #####:  409:	if ( j >= 3)
        -:  410:		{
    #####:  411:			return 1;
        -:  412:		}
        -:  413:
    #####:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:		{
    #####:  424:			if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:			if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:			if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:			if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:			if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:		}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:		{
    #####:  435:			if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:			if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:			if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:			if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:			if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:		}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:		{
    #####:  446:			if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:			if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:			if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:			if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:			if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:		}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:		{
        -:  466:			//set unused player scores to -9999
    #####:  467:			if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:		players[i] = -9999;
        -:  470:	}
        -:  471:			else
        -:  472:	{
    #####:  473:		players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:		}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:		{
    #####:  481:			if (players[i] > players[j])
        -:  482:	{
    #####:  483:		j = i;
        -:  484:	}
        -:  485:		}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:		{
    #####:  492:			if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:		players[i]++;
        -:  495:	}
        -:  496:		}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:		{
    #####:  502:			if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:		j = i;
        -:  505:	}
        -:  506:		}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:		{
    #####:  512:			if ( players[i] == highScore )
        -:  513:	{
    #####:  514:		players[i] = 1;
        -:  515:	}
        -:  516:			else
        -:  517:	{
    #####:  518:		players[i] = 0;
        -:  519:	}
        -:  520:		}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
    15026:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
    15026:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:		
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
     3305:  533:		for (i = 0; i < state->discardCount[player];i++){
      963:  534:			state->deck[player][i] = state->discard[player][i];
      963:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
     2342:  538:		state->deckCount[player] = state->discardCount[player];
     2342:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
     2342:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:	 
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:		
     2342:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
     2342:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:		
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:		
     2342:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     2342:  559:		if (deckCounter == 0)
     2259:  560:			return -1;
        -:  561:
       83:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       83:  563:		state->deckCount[player]--;
       83:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
    12684:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
    12684:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
    12684:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    12684:  576:		state->deckCount[player]--;
    12684:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
    12767:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:		{
    #####:  587:		case curse:
    #####:  588:			return 0;
    #####:  589:		case estate:
    #####:  590:			return 2;
    #####:  591:		case duchy:
    #####:  592:			return 5;
    #####:  593:		case province:
    #####:  594:			return 8;
    #####:  595:		case copper:
    #####:  596:			return 0;
    #####:  597:		case silver:
    #####:  598:			return 3;
    #####:  599:		case gold:
    #####:  600:			return 6;
    #####:  601:		case adventurer:
    #####:  602:			return 6;
    #####:  603:		case council_room:
    #####:  604:			return 5;
    #####:  605:		case feast:
    #####:  606:			return 4;
    #####:  607:		case gardens:
    #####:  608:			return 4;
    #####:  609:		case mine:
    #####:  610:			return 5;
    #####:  611:		case remodel:
    #####:  612:			return 4;
    #####:  613:		case smithy:
    #####:  614:			return 4;
    #####:  615:		case village:
    #####:  616:			return 3;
    #####:  617:		case baron:
    #####:  618:			return 4;
    #####:  619:		case great_hall:
    #####:  620:			return 3;
    #####:  621:		case minion:
    #####:  622:			return 5;
    #####:  623:		case steward:
    #####:  624:			return 3;
    #####:  625:		case tribute:
    #####:  626:			return 5;
    #####:  627:		case ambassador:
    #####:  628:			return 3;
    #####:  629:		case cutpurse:
    #####:  630:			return 4;
    #####:  631:		case embargo: 
    #####:  632:			return 2;
    #####:  633:		case outpost:
    #####:  634:			return 5;
    #####:  635:		case salvager:
    #####:  636:			return 4;
    #####:  637:		case sea_hag:
    #####:  638:			return 4;
    #####:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:		}
        -:  642:	
    #####:  643:	return -1;
        -:  644:}
        -:  645:
        -:  646:/*
        -:  647: * Jonah Siekmann 1/26/2019
        -:  648: */
     2000:  649:int smithyEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  650:	//+3 Cards
     8000:  651:	for (int i = 0; i < 3; i++){
     6000:  652:		drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:	
        -:  655:	//discard card from hand
     2000:  656:	discardCard(handPos, currentPlayer, state, 0);
     2000:  657:	return 0;
        -:  658:}
        -:  659:/*
        -:  660: * Jonah Siekmann 1/26/2019
        -:  661: */
      250:  662:int adventurerEffect(int currentPlayer, struct gameState *state){
      250:  663:	printf("INSIDE ADVENTURER EFFECT\n");
        -:  664:	int temphand[MAX_HAND];
      250:  665:	int drawntreasure = 0;
        -:  666:	int cardDrawn;
      250:  667:	int z = 0;
     3681:  668:	while(drawntreasure<2){
     3431:  669:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     1299:  670:			shuffle(currentPlayer, state);
        -:  671:		}
     3431:  672:		drawCard(currentPlayer, state);
     3431:  673:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     3431:  674:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      500:  675:			drawntreasure++;
        -:  676:		else{
     2931:  677:			temphand[z]=cardDrawn;
     2931:  678:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2931:  679:			z++;
        -:  680:		}
        -:  681:	}
     3431:  682:	while(z>=0){
     3181:  683:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     3181:  684:		z=z-1;
        -:  685:	}
      250:  686:	return 0;
        -:  687:}
        -:  688:/*
        -:  689: * Jonah Siekmann 1/26/2019
        -:  690: */
    #####:  691:int mineEffect(int currentPlayer, struct gameState *state, int choice2, int choice1, int handPos){
    #####:  692:	int j = state->hand[currentPlayer][choice1];	//store card we will trash
        -:  693:
    #####:  694:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold){
    #####:  695:		return -1;
        -:  696:	}
        -:  697:
    #####:  698:	if (choice2 > treasure_map || choice2 < curse){
    #####:  699:		return -1;
        -:  700:	}
        -:  701:
    #####:  702:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ){
    #####:  703:		return -1;
        -:  704:	}
        -:  705:
    #####:  706:	gainCard(choice2, state, 2, currentPlayer);
        -:  707:
        -:  708:	//discard card from hand
    #####:  709:	discardCard(handPos, currentPlayer, state, 0);
        -:  710:
        -:  711:	//discard trashed card
    #####:  712:	for(int i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  713:		if (state->hand[currentPlayer][i] == j){
    #####:  714:				discardCard(i, currentPlayer, state, 0);			
    #####:  715:				break;
        -:  716:			}
        -:  717:	}
    #####:  718:	return 0;
        -:  719:}
        -:  720:/*
        -:  721: * Jonah Siekmann 1/26/2019
        -:  722: */
    #####:  723:int feastEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -:  724:	//gain card with cost up to 5
        -:  725:	int temphand[MAX_HAND];
        -:  726:	//Backup hand
    #####:  727:	for(int i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  728:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  729:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  730:	}
        -:  731:	//Backup hand
        -:  732:
        -:  733:	//Update Coins for Buy
    #####:  734:	updateCoins(currentPlayer, state, 5);
    #####:  735:	int x = 1;//Condition to loop on
    #####:  736:	while( x == 1) {//Buy one card
    #####:  737:		if (supplyCount(choice1, state) <= 0){
        -:  738:			if (DEBUG)
        -:  739:				printf("None of that card left, sorry!\n");
        -:  740:
        -:  741:			if (DEBUG){
        -:  742:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  743:			}
        -:  744:		}
    #####:  745:		else if (state->coins < getCost(choice1)){
    #####:  746:			printf("That card is too expensive!\n");
        -:  747:
        -:  748:			if (DEBUG){
        -:  749:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  750:			}
        -:  751:		}
        -:  752:		else{
        -:  753:
        -:  754:			if (DEBUG){
        -:  755:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  756:			}
        -:  757:
    #####:  758:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  759:			x = 0;//No more buying cards
        -:  760:
        -:  761:			if (DEBUG){
        -:  762:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  763:			}
        -:  764:
        -:  765:		}
        -:  766:	}			
        -:  767:
        -:  768:	//Reset Hand
    #####:  769:	for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  770:		state->hand[currentPlayer][i] = temphand[i];
    #####:  771:		temphand[i] = -1;
        -:  772:	}
        -:  773:	//Reset Hand
        -:  774:				
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:/*
        -:  779: * Jonah Siekmann 1/26/2019
        -:  780: */
    #####:  781:int councilroomEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  782:	//+4 Cards
    #####:  783:	for (int i = 0; i < 4; i++){
    #####:  784:		drawCard(currentPlayer, state);
        -:  785:	}
        -:  786:	
        -:  787:	//+1 Buy
    #####:  788:	state->numBuys++;
        -:  789:	
        -:  790:	//Each other player draws a card
    #####:  791:	for (int i = 0; i < state->numPlayers; i++){
    #####:  792:		if ( i != currentPlayer )
        -:  793:			{
    #####:  794:				drawCard(i, state);
        -:  795:			}
        -:  796:	}
        -:  797:	
        -:  798:	//put played card in played card pile
    #####:  799:	discardCard(handPos, currentPlayer, state, 0);
        -:  800:	
    #####:  801:	return 0;
        -:  802:}
        -:  803:
     2500:  804:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  805:{
        -:  806:	int i;
        -:  807:	int j;
        -:  808:	int k;
        -:  809:	//int x;
        -:  810:	int index;
     2500:  811:	int currentPlayer = whoseTurn(state);
     2500:  812:	int nextPlayer = currentPlayer + 1;
        -:  813:
     2500:  814:	int tributeRevealedCards[2] = {-1, -1};
        -:  815:	//int temphand[MAX_HAND];// moved above the if statement
        -:  816:	//int drawntreasure=0;
        -:  817:	//int cardDrawn;
        -:  818:	//int z = 0;// this is the counter for the temp hand
     2500:  819:	if (nextPlayer > (state->numPlayers - 1)){
      669:  820:		nextPlayer = 0;
        -:  821:	}
        -:  822:	
        -:  823:	
        -:  824:	//uses switch to select card and perform actions
     2500:  825:	switch( card ) 
        -:  826:		{
      250:  827:		case adventurer:
      250:  828:			return adventurerEffect(currentPlayer, state);	
        -:  829:		
    #####:  830:		case council_room:
    #####:  831:			return councilroomEffect(currentPlayer, state, handPos);
        -:  832:		
    #####:  833:		case feast:
    #####:  834:			return feastEffect(currentPlayer, state, choice1, choice2, handPos);
        -:  835:
    #####:  836:		case gardens:
    #####:  837:			return -1;
        -:  838:			
    #####:  839:		case mine:
    #####:  840:			return mineEffect(currentPlayer, state, choice1, choice2, handPos);
        -:  841:			
    #####:  842:		case remodel:
    #####:  843:			j = state->hand[currentPlayer][choice1];	//store card we will trash
        -:  844:
    #####:  845:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ){
    #####:  846:				return -1;
        -:  847:			}
        -:  848:
    #####:  849:			gainCard(choice2, state, 0, currentPlayer);
        -:  850:
        -:  851:			//discard card from hand
    #####:  852:			discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:			//discard trashed card
    #####:  855:			for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  856:				if (state->hand[currentPlayer][i] == j)
        -:  857:					{
    #####:  858:						discardCard(i, currentPlayer, state, 0);			
    #####:  859:						break;
        -:  860:					}
        -:  861:			}
        -:  862:
        -:  863:
    #####:  864:			return 0;
        -:  865:		
     2000:  866:		case smithy:
     2000:  867:			return smithyEffect(currentPlayer, state, handPos);
        -:  868:		
      250:  869:		case village:
        -:  870:			//+1 Card
      250:  871:			drawCard(currentPlayer, state);
        -:  872:			
        -:  873:			//+2 Actions
      250:  874:			state->numActions = state->numActions + 2;
        -:  875:			
        -:  876:			//discard played card from hand
      250:  877:			discardCard(handPos, currentPlayer, state, 0);
      250:  878:			return 0;
        -:  879:		
    #####:  880:		case baron:
    #####:  881:			state->numBuys++;//Increase buys by 1!
    #####:  882:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  883:	int p = 0;//Iterator for hand!
    #####:  884:	int card_not_discarded = 1;//Flag for discard set!
    #####:  885:	while(card_not_discarded){
    #####:  886:		if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  887:			state->coins += 4;//Add 4 coins to the amount of coins
    #####:  888:			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  889:			state->discardCount[currentPlayer]++;
    #####:  890:			for (;p < state->handCount[currentPlayer]; p++){
    #####:  891:				state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  892:			}
    #####:  893:			state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  894:			state->handCount[currentPlayer]--;
    #####:  895:			card_not_discarded = 0;//Exit the loop
        -:  896:		}
    #####:  897:		else if (p > state->handCount[currentPlayer]){
        -:  898:			if(DEBUG) {
        -:  899:				printf("No estate cards in your hand, invalid choice\n");
        -:  900:				printf("Must gain an estate if there are any\n");
        -:  901:			}
    #####:  902:			if (supplyCount(estate, state) > 0){
    #####:  903:				gainCard(estate, state, 0, currentPlayer);
    #####:  904:				state->supplyCount[estate]--;//Decrement estates
    #####:  905:				if (supplyCount(estate, state) == 0){
    #####:  906:		isGameOver(state);
        -:  907:				}
        -:  908:			}
    #####:  909:			card_not_discarded = 0;//Exit the loop
        -:  910:		}
        -:  911:					
        -:  912:		else{
    #####:  913:			p++;//Next card
        -:  914:		}
        -:  915:	}
        -:  916:			}
        -:  917:					
        -:  918:			else{
    #####:  919:	if (supplyCount(estate, state) > 0){
    #####:  920:		gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  921:		state->supplyCount[estate]--;//Decrement Estates
    #####:  922:		if (supplyCount(estate, state) == 0){
    #####:  923:			isGameOver(state);
        -:  924:		}
        -:  925:	}
        -:  926:			}
        -:  927:			
        -:  928:			
    #####:  929:			return 0;
        -:  930:		
    #####:  931:		case great_hall:
        -:  932:			//+1 Card
    #####:  933:			drawCard(currentPlayer, state);
        -:  934:			
        -:  935:			//+1 Actions
    #####:  936:			state->numActions++;
        -:  937:			
        -:  938:			//discard card from hand
    #####:  939:			discardCard(handPos, currentPlayer, state, 0);
    #####:  940:			return 0;
        -:  941:		
    #####:  942:		case minion:
        -:  943:			//+1 action
    #####:  944:			state->numActions++;
        -:  945:			
        -:  946:			//discard card from hand
    #####:  947:			discardCard(handPos, currentPlayer, state, 0);
        -:  948:			
    #####:  949:			if (choice1)		//+2 coins
        -:  950:	{
    #####:  951:		state->coins = state->coins + 2;
        -:  952:	}
        -:  953:			
    #####:  954:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  955:	{
        -:  956:		//discard hand
    #####:  957:		while(numHandCards(state) > 0)
        -:  958:			{
    #####:  959:				discardCard(handPos, currentPlayer, state, 0);
        -:  960:			}
        -:  961:				
        -:  962:		//draw 4
    #####:  963:		for (i = 0; i < 4; i++)
        -:  964:			{
    #####:  965:				drawCard(currentPlayer, state);
        -:  966:			}
        -:  967:				
        -:  968:		//other players discard hand and redraw if hand size > 4
    #####:  969:		for (i = 0; i < state->numPlayers; i++)
        -:  970:			{
    #####:  971:				if (i != currentPlayer)
        -:  972:		{
    #####:  973:			if ( state->handCount[i] > 4 )
        -:  974:				{
        -:  975:					//discard hand
    #####:  976:					while( state->handCount[i] > 0 )
        -:  977:			{
    #####:  978:				discardCard(handPos, i, state, 0);
        -:  979:			}
        -:  980:							
        -:  981:					//draw 4
    #####:  982:					for (j = 0; j < 4; j++)
        -:  983:			{
    #####:  984:				drawCard(i, state);
        -:  985:			}
        -:  986:				}
        -:  987:		}
        -:  988:			}
        -:  989:				
        -:  990:	}
    #####:  991:			return 0;
        -:  992:		
    #####:  993:		case steward:
    #####:  994:			if (choice1 == 1)
        -:  995:	{
        -:  996:		//+2 cards
    #####:  997:		drawCard(currentPlayer, state);
    #####:  998:		drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:			else if (choice1 == 2)
        -: 1001:	{
        -: 1002:		//+2 coins
    #####: 1003:		state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:			else
        -: 1006:	{
        -: 1007:		//trash 2 cards in hand
    #####: 1008:		discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:		discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:			//discard card from hand
    #####: 1013:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:			return 0;
        -: 1015:		
    #####: 1016:		case tribute:
    #####: 1017:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:		state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:		tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:		state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:		//No Card to Reveal
        -: 1028:		if (DEBUG){
        -: 1029:			printf("No cards to reveal\n");
        -: 1030:		}
        -: 1031:	}
        -: 1032:			}
        -: 1033:			
        -: 1034:			else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:		for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:			state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:			state->deckCount[nextPlayer]++;
    #####: 1039:			state->discard[nextPlayer][i] = -1;
    #####: 1040:			state->discardCount[nextPlayer]--;
        -: 1041:		}
        -: 1042:					
    #####: 1043:		shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:			}		 
        -: 1052:					 
    #####: 1053:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:			}
        -: 1058:
    #####: 1059:			for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:		state->coins += 2;
        -: 1062:	}
        -: 1063:				
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:		drawCard(currentPlayer, state);
    #####: 1066:		drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:		state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:			}
        -: 1072:			
    #####: 1073:			return 0;
        -: 1074:		
    #####: 1075:		case ambassador:
    #####: 1076:			j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:			if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:		return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:			if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:		return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:			{
    #####: 1092:				j++;
        -: 1093:			}
        -: 1094:	}
    #####: 1095:			if (j < choice2)
        -: 1096:	{
    #####: 1097:		return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:			if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:			//increase supply count for choosen card by amount being discarded
    #####: 1104:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:			//each other player gains a copy of revealed card
    #####: 1107:			for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:		if (i != currentPlayer)
        -: 1110:			{
    #####: 1111:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:			}
        -: 1113:	}
        -: 1114:
        -: 1115:			//discard played card from hand
    #####: 1116:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:			//trash copies of cards returned to supply
    #####: 1119:			for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:			{
    #####: 1123:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:			discardCard(i, currentPlayer, state, 1);
    #####: 1126:			break;
        -: 1127:		}
        -: 1128:			}
        -: 1129:	}			
        -: 1130:
    #####: 1131:			return 0;
        -: 1132:		
    #####: 1133:		case cutpurse:
        -: 1134:
    #####: 1135:			updateCoins(currentPlayer, state, 2);
    #####: 1136:			for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:		if (i != currentPlayer)
        -: 1139:			{
    #####: 1140:				for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:			if (state->hand[i][j] == copper)
        -: 1143:				{
    #####: 1144:					discardCard(j, i, state, 0);
    #####: 1145:					break;
        -: 1146:				}
    #####: 1147:			if (j == state->handCount[i])
        -: 1148:				{
    #####: 1149:					for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:				if (DEBUG)
        -: 1152:					printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:					break;
        -: 1155:				}		
        -: 1156:		}
        -: 1157:					
        -: 1158:			}
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:			//discard played card from hand
    #####: 1163:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:			return 0;
        -: 1166:
        -: 1167:		
    #####: 1168:		case embargo: 
        -: 1169:			//+2 Coins
    #####: 1170:			state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:			//see if selected pile is in play
    #####: 1173:			if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:		return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:			//add embargo token to selected supply pile
    #####: 1179:			state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:			//trash card
    #####: 1182:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:			return 0;
        -: 1184:		
    #####: 1185:		case outpost:
        -: 1186:			//set outpost flag
    #####: 1187:			state->outpostPlayed++;
        -: 1188:			
        -: 1189:			//discard card
    #####: 1190:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:			return 0;
        -: 1192:		
    #####: 1193:		case salvager:
        -: 1194:			//+1 buy
    #####: 1195:			state->numBuys++;
        -: 1196:			
    #####: 1197:			if (choice1)
        -: 1198:	{
        -: 1199:		//gain coins equal to trashed card
    #####: 1200:		state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:		//trash card
    #####: 1202:		discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:			//discard card
    #####: 1206:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:			return 0;
        -: 1208:		
    #####: 1209:		case sea_hag:
    #####: 1210:			for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:		state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];					state->deckCount[i]--;
    #####: 1213:		state->discardCount[i]++;
    #####: 1214:		state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:			}
    #####: 1217:			return 0;
        -: 1218:		
    #####: 1219:		case treasure_map:
        -: 1220:			//search hand for another treasure_map
    #####: 1221:			index = -1;
    #####: 1222:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:		if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:			{
    #####: 1226:				index = i;
    #####: 1227:				break;
        -: 1228:			}
        -: 1229:	}
    #####: 1230:			if (index > -1)
        -: 1231:	{
        -: 1232:		//trash both treasure cards
    #####: 1233:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:		discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:		//gain 4 Gold cards
    #####: 1237:		for (i = 0; i < 4; i++)
        -: 1238:			{
    #####: 1239:				gainCard(gold, state, 1, currentPlayer);
        -: 1240:			}
        -: 1241:				
        -: 1242:		//return success
    #####: 1243:		return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:			//no second treasure_map found in hand
    #####: 1247:			return -1;
        -: 1248:		}
        -: 1249:	
    #####: 1250:	return -1;
        -: 1251:}
        -: 1252:
     2250: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:	//if card is not trashed, added to Played pile 
     2250: 1257:	if (trashFlag < 1)
        -: 1258:		{
        -: 1259:			//add card to played pile
     2250: 1260:			state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     2250: 1261:			state->playedCardCount++;
        -: 1262:		}
        -: 1263:	
        -: 1264:	//set played card to -1
     2250: 1265:	state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:	//remove card from player's hand
     2250: 1268:	if ( handPos == (state->handCount[currentPlayer] - 1) )		//last card in hand array is played
        -: 1269:		{
        -: 1270:			//reduce number of cards in hand
        3: 1271:			state->handCount[currentPlayer]--;
        -: 1272:		}
     2247: 1273:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:		{
        -: 1275:			//reduce number of cards in hand
      122: 1276:			state->handCount[currentPlayer]--;
        -: 1277:		}
        -: 1278:	else	
        -: 1279:		{
        -: 1280:			//replace discarded card with last card in hand
     2125: 1281:			state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:			//set last card to -1
     2125: 1283:			state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:			//reduce number of cards in hand
     2125: 1285:			state->handCount[currentPlayer]--;
        -: 1286:		}
        -: 1287:	
     2250: 1288:	return 0;
        -: 1289:}
        -: 1290:
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:	//Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:		{
    #####: 1298:			return -1;
        -: 1299:		}
        -: 1300:	
        -: 1301:	//added card for [whoseTurn] current player:
        -: 1302:	// toFlag = 0 : add to discard
        -: 1303:	// toFlag = 1 : add to deck
        -: 1304:	// toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:	if (toFlag == 1)
        -: 1307:		{
    #####: 1308:			state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:			state->deckCount[player]++;
        -: 1310:		}
    #####: 1311:	else if (toFlag == 2)
        -: 1312:		{
    #####: 1313:			state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:			state->handCount[player]++;
        -: 1315:		}
        -: 1316:	else
        -: 1317:		{
    #####: 1318:			state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:			state->discardCount[player]++;
        -: 1320:		}
        -: 1321:	
        -: 1322:	//decrease number in supply pile
    #####: 1323:	state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:	return 0;
        -: 1326:}
        -: 1327:
     1069: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:	int i;
        -: 1331:	
        -: 1332:	//reset coin count
     1069: 1333:	state->coins = 0;
        -: 1334:
        -: 1335:	//add coins for each Treasure card in player's hand
     6414: 1336:	for (i = 0; i < state->handCount[player]; i++)
        -: 1337:		{
     5345: 1338:			if (state->hand[player][i] == copper)
        -: 1339:	{
     4276: 1340:		state->coins += 1;
        -: 1341:	}
     1069: 1342:			else if (state->hand[player][i] == silver)
        -: 1343:	{
    #####: 1344:		state->coins += 2;
        -: 1345:	}
     1069: 1346:			else if (state->hand[player][i] == gold)
        -: 1347:	{
    #####: 1348:		state->coins += 3;
        -: 1349:	}	
        -: 1350:		}	
        -: 1351:
        -: 1352:	//add bonus
     1069: 1353:	state->coins += bonus;
        -: 1354:
     1069: 1355:	return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
