        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    53008:    8:int compare(const void *a, const void *b)
        -:    9:{
    53008:   10:  if (*(int *)a > *(int *)b)
     2147:   11:    return 1;
    50861:   12:  if (*(int *)a < *(int *)b)
    14257:   13:    return -1;
    36604:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
     2508:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
     2508:   48:  SelectStream(1);
     2508:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
     2508:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
      655:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
     1853:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
    16903:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
   171748:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
   156698:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
      776:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
     1077:   76:  if (numPlayers == 2)
        -:   77:  {
      370:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
      707:   80:  else if (numPlayers == 3)
        -:   81:  {
      363:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
      344:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
     1077:   90:  if (numPlayers == 2)
        -:   91:  {
      370:   92:    state->supplyCount[estate] = 8;
      370:   93:    state->supplyCount[duchy] = 8;
      370:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
      707:   98:    state->supplyCount[estate] = 12;
      707:   99:    state->supplyCount[duchy] = 12;
      707:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
     1077:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1077:  105:  state->supplyCount[silver] = 40;
     1077:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
    22617:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
   179136:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
   167965:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
    10369:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
     2110:  118:          if (numPlayers == 2)
        -:  119:          {
      352:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
      703:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
     9314:  129:          state->supplyCount[i] = 10;
        -:  130:        }
    10369:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
   157596:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     4282:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
     3205:  146:    state->deckCount[i] = 0;
    12820:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
     9615:  149:      state->deck[i][j] = estate;
     9615:  150:      state->deckCount[i]++;
        -:  151:    }
    25640:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
    22435:  154:      state->deck[i][j] = copper;
    22435:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
     4282:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
     3205:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
     4282:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
     3205:  172:    state->handCount[i] = 0;
     3205:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
    30156:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
    29079:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
     1077:  188:  state->outpostPlayed = 0;
     1077:  189:  state->phase = 0;
     1077:  190:  state->numActions = 1;
     1077:  191:  state->numBuys = 1;
     1077:  192:  state->playedCardCount = 0;
     1077:  193:  state->whoseTurn = 0;
     1077:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     6462:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
     5385:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
     1077:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
     1077:  205:  return 0;
        -:  206:}
        -:  207:
    12538:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
    12538:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
    12538:  216:  if (state->deckCount[player] < 1)
     9249:  217:    return -1;
     3289:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
    36838:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
    33549:  223:    card = floor(Random() * state->deckCount[player]);
    33549:  224:    newDeck[newDeckPos] = state->deck[player][card];
    33549:  225:    newDeckPos++;
   139170:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
   105621:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
    33549:  230:    state->deckCount[player]--;
        -:  231:  }
    36838:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
    33549:  234:    state->deck[player][i] = newDeck[i];
    33549:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
     3289:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        6:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        6:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
       27:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
       27:  349:  int count = 0;
        -:  350:
      162:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
      135:  353:    if (state->deck[player][i] == card)
       49:  354:      count++;
        -:  355:  }
        -:  356:
      162:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
      135:  359:    if (state->hand[player][i] == card)
       43:  360:      count++;
        -:  361:  }
        -:  362:
      27*:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
       27:  369:  return count;
        -:  370:}
        -:  371:
     2515:  372:int whoseTurn(struct gameState *state)
        -:  373:{
     2515:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
        6:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
        6:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
       36:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
       30:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
       30:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
        6:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
        6:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
        5:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
        1:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
        6:  401:  state->outpostPlayed = 0;
        6:  402:  state->phase = 0;
        6:  403:  state->numActions = 1;
        6:  404:  state->coins = 0;
        6:  405:  state->numBuys = 1;
        6:  406:  state->playedCardCount = 0;
        6:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
       36:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
       30:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
        6:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
        6:  419:  return 0;
        -:  420:}
        -:  421:
    27602:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    27602:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
     1657:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    25945:  434:  j = 0;
   674570:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
   648625:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    36432:  439:      j++;
        -:  440:    }
        -:  441:  }
    25945:  442:  if (j >= 3)
        -:  443:  {
    12144:  444:    return 1;
        -:  445:  }
        -:  446:
    13801:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
    20126:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
    20126:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
     7131:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
     1499:  626:      state->deck[player][i] = state->discard[player][i];
     1499:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
     5632:  630:    state->deckCount[player] = state->discardCount[player];
     5632:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
     5632:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
     5632:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
     5632:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
     5632:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
     5632:  653:    if (deckCounter == 0)
     5548:  654:      return -1;
        -:  655:
       84:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
       84:  657:    state->deckCount[player]--;
       84:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
    14494:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
    14494:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
    14494:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
    14494:  672:    state->deckCount[player]--;
    14494:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
    14578:  676:  return 0;
        -:  677:}
        -:  678:
       12:  679:int getCost(int cardNumber)
        -:  680:{
       12:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        5:  693:  case silver:
        5:  694:    return 3;
        5:  695:  case gold:
        5:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
      251:  742:int adventurerEffect(int currentPlayer, int tempHand[], int cardDrawn, struct gameState *state){
      251:  743:  int tempHandCounter = 0; 
      251:  744:  int drawnTreasure = 0; 
     6702:  745:  while (drawnTreasure < 2)
        -:  746:  {
     6451:  747:    if (state->deckCount[currentPlayer] < 1)
        -:  748:    { //if the deck is empty we need to shuffle discard and add to deck
     3701:  749:      shuffle(currentPlayer, state);
        -:  750:    }
     6451:  751:    drawCard(currentPlayer, state);
     6451:  752:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
     6451:  753:    if (cardDrawn == copper) // **BUG** should also check for silver and gold 
      502:  754:      drawnTreasure++;
        -:  755:    else
        -:  756:    {
     5949:  757:      tempHand[tempHandCounter] = cardDrawn;
     5949:  758:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5949:  759:      tempHandCounter++;
        -:  760:    }
        -:  761:  }
     6200:  762:  while (tempHandCounter - 1 >= 0)
        -:  763:  {
     5949:  764:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[tempHandCounter - 1]; // discard all cards in play that have been drawn
     5949:  765:    tempHandCounter = tempHandCounter - 1;
        -:  766:  }
      251:  767:  return 0;
        -:  768:}
        -:  769:
        1:  770:int councilRoomEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  771:    //+4 Cards
        5:  772:    for (int i = 0; i < 4; i++)
        -:  773:    {
        4:  774:      drawCard(currentPlayer, state);
        -:  775:    }
        -:  776:
        -:  777:    //+1 Buy
        1:  778:    state->numBuys++;
        -:  779:
        -:  780:    //Each other player draws a card
        3:  781:    for (int i = 0; i < state->numPlayers; i++)
        -:  782:    {
        -:  783:      //if (i != currentPlayer)
        2:  784:        drawCard(i, state); // ** BUG ** should exclude the current player from drawing a card
        -:  785:    }
        -:  786:
        -:  787:    //put played card in played card pile
        1:  788:    discardCard(handPos, currentPlayer, state, 0);
        -:  789:
        1:  790:    return 0; 
        -:  791:}
        -:  792:
    #####:  793:int feastEffect(int choice1, int currentPlayer, int tempHand[], struct gameState *state){
        -:  794:    //gain card with cost up to 5
        -:  795:    //Backup hand
    #####:  796:    for (int i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  797:    {
    #####:  798:      tempHand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  799:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  800:    }
        -:  801:    //Backup hand
        -:  802:
        -:  803:    //Update Coins for Buy
    #####:  804:    updateCoins(currentPlayer, state, 5);
    #####:  805:    int x = 1; //Condition to loop on
    #####:  806:    while (x == 1)
        -:  807:    { //Buy one card
    #####:  808:      if (supplyCount(choice1, state) <= 0)
        -:  809:      {
        -:  810:        if (DEBUG)
        -:  811:          printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:        if (DEBUG)
        -:  814:        {
        -:  815:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:        }
        -:  817:      }
    #####:  818:      else if (state->coins < getCost(choice1))
        -:  819:      {
    #####:  820:        printf("That card is too expensive!\n");
        -:  821:
        -:  822:        if (DEBUG)
        -:  823:        {
        -:  824:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  825:        }
        -:  826:      }
        -:  827:      else
        -:  828:      {
        -:  829:
        -:  830:        if (DEBUG)
        -:  831:        {
        -:  832:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:        }
        -:  834:
    #####:  835:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  836:        x = 0;                                      //No more buying cards
        -:  837:
        -:  838:        if (DEBUG)
        -:  839:        {
        -:  840:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:        }
        -:  842:      }
        -:  843:    }
        -:  844:
        -:  845:    //Reset Hand
    #####:  846:    for (int i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  847:    {
    #####:  848:      state->hand[currentPlayer][i] = tempHand[i];
    #####:  849:      tempHand[i] = -1;
        -:  850:    }
        -:  851:    //Reset Hand
        -:  852:
    #####:  853:    return 0;
        -:  854:}
        -:  855:
        6:  856:int mineEffect(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state){
        6:  857:    int j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  858:
        6:  859:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  860:    {
    #####:  861:      return -1;
        -:  862:    }
        -:  863:
        6:  864:    if (choice2 > treasure_map || choice2 < curse)
        -:  865:    {
    #####:  866:      return -1;
        -:  867:    }
        -:  868:
        -:  869:    // ** BUG ** the gained treasure should not exceed the value of the original by 3 coins 
        -:  870:    /*if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  871:    {
        -:  872:      return -1;
        -:  873:    }*/
        -:  874:
        6:  875:    gainCard(choice2, state, 2, currentPlayer);
        -:  876:
        -:  877:    //discard card from hand
        6:  878:    discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:    //discard trashed card
       18:  881:    for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:    {
       16:  883:      if (state->hand[currentPlayer][i] == j)
        -:  884:      {
        4:  885:        discardCard(i, currentPlayer, state, 0);
        4:  886:        break;
        -:  887:      }
        -:  888:    }
        -:  889:
        6:  890:    return 0;
        -:  891:}
        -:  892:
     2001:  893:int smithyEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  894:    //+3 Cards
    10005:  895:    for (int i = 0; i < 4; i++)
        -:  896:    {
     8004:  897:      drawCard(currentPlayer, state);
        -:  898:    }
        -:  899:
        -:  900:    //discard card from hand
     2001:  901:    discardCard(handPos, currentPlayer, state, 0);
     2001:  902:    return 0;
        -:  903:}
        -:  904:
     2509:  905:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  906:{
        -:  907:  int i;
        -:  908:  int j;
        -:  909:  int k;
        -:  910:  int index;
     2509:  911:  int currentPlayer = whoseTurn(state);
     2509:  912:  int nextPlayer = currentPlayer + 1;
        -:  913:
     2509:  914:  int tributeRevealedCards[2] = {-1, -1};
        -:  915:  int tempHand[MAX_HAND]; // moved above the if statement
     2509:  916:  int cardDrawn = -1; 
        -:  917:  
     2509:  918:  if (nextPlayer > (state->numPlayers - 1))
        -:  919:  {
      669:  920:    nextPlayer = 0;
        -:  921:  }
        -:  922:
        -:  923:  //uses switch to select card and perform actions
     2509:  924:  switch (card)
        -:  925:  {
      251:  926:  case adventurer:
      251:  927:    return adventurerEffect(currentPlayer, tempHand, cardDrawn, state);
        1:  928:  case council_room:
        1:  929:    return councilRoomEffect(currentPlayer, handPos, state); 
    #####:  930:  case feast:
    #####:  931:    return feastEffect(choice1, currentPlayer, tempHand, state); 
    #####:  932:  case gardens:
    #####:  933:    return -1;
        6:  934:  case mine:
        6:  935:    return mineEffect(choice1, choice2, currentPlayer, handPos, state); 
        -:  936:
    #####:  937:  case remodel: 
    #####:  938:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  939:
    #####:  940:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  941:    {
    #####:  942:      return -1;
        -:  943:    }
        -:  944:
    #####:  945:    gainCard(choice2, state, 0, currentPlayer);
        -:  946:
        -:  947:    //discard card from hand
    #####:  948:    discardCard(handPos, currentPlayer, state, 0);
        -:  949:
        -:  950:    //discard trashed card
    #####:  951:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  952:    {
    #####:  953:      if (state->hand[currentPlayer][i] == j)
        -:  954:      {
    #####:  955:        discardCard(i, currentPlayer, state, 0);
    #####:  956:        break;
        -:  957:      }
        -:  958:    }
        -:  959:
    #####:  960:    return 0;
     2001:  961:  case smithy:
     2001:  962:    return smithyEffect(currentPlayer, handPos, state); 
        -:  963:
      250:  964:  case village:
        -:  965:    //+1 Card
      250:  966:    drawCard(currentPlayer, state);
        -:  967:
        -:  968:    //+2 Actions
      250:  969:    state->numActions = state->numActions + 2;
        -:  970:
        -:  971:    //discard played card from hand
      250:  972:    discardCard(handPos, currentPlayer, state, 0);
      250:  973:    return 0;
        -:  974:
    #####:  975:  case baron:
    #####:  976:    state->numBuys++; //Increase buys by 1!
    #####:  977:    if (choice1 > 0)
        -:  978:    {                             //Boolean true or going to discard an estate
    #####:  979:      int p = 0;                  //Iterator for hand!
    #####:  980:      int card_not_discarded = 1; //Flag for discard set!
    #####:  981:      while (card_not_discarded)
        -:  982:      {
    #####:  983:        if (state->hand[currentPlayer][p] == estate)
        -:  984:        {                    //Found an estate card!
    #####:  985:          state->coins += 4; //Add 4 coins to the amount of coins
    #####:  986:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  987:          state->discardCount[currentPlayer]++;
    #####:  988:          for (; p < state->handCount[currentPlayer]; p++)
        -:  989:          {
    #####:  990:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  991:          }
    #####:  992:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  993:          state->handCount[currentPlayer]--;
    #####:  994:          card_not_discarded = 0; //Exit the loop
        -:  995:        }
    #####:  996:        else if (p > state->handCount[currentPlayer])
        -:  997:        {
        -:  998:          if (DEBUG)
        -:  999:          {
        -: 1000:            printf("No estate cards in your hand, invalid choice\n");
        -: 1001:            printf("Must gain an estate if there are any\n");
        -: 1002:          }
    #####: 1003:          if (supplyCount(estate, state) > 0)
        -: 1004:          {
    #####: 1005:            gainCard(estate, state, 0, currentPlayer);
    #####: 1006:            state->supplyCount[estate]--; //Decrement estates
    #####: 1007:            if (supplyCount(estate, state) == 0)
        -: 1008:            {
    #####: 1009:              isGameOver(state);
        -: 1010:            }
        -: 1011:          }
    #####: 1012:          card_not_discarded = 0; //Exit the loop
        -: 1013:        }
        -: 1014:
        -: 1015:        else
        -: 1016:        {
    #####: 1017:          p++; //Next card
        -: 1018:        }
        -: 1019:      }
        -: 1020:    }
        -: 1021:
        -: 1022:    else
        -: 1023:    {
    #####: 1024:      if (supplyCount(estate, state) > 0)
        -: 1025:      {
    #####: 1026:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1027:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1028:        if (supplyCount(estate, state) == 0)
        -: 1029:        {
    #####: 1030:          isGameOver(state);
        -: 1031:        }
        -: 1032:      }
        -: 1033:    }
        -: 1034:
    #####: 1035:    return 0;
        -: 1036:
    #####: 1037:  case great_hall:
        -: 1038:    //+1 Card
    #####: 1039:    drawCard(currentPlayer, state);
        -: 1040:
        -: 1041:    //+1 Actions
    #####: 1042:    state->numActions++;
        -: 1043:
        -: 1044:    //discard card from hand
    #####: 1045:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1046:    return 0;
        -: 1047:
    #####: 1048:  case minion:
        -: 1049:    //+1 action
    #####: 1050:    state->numActions++;
        -: 1051:
        -: 1052:    //discard card from hand
    #####: 1053:    discardCard(handPos, currentPlayer, state, 0);
        -: 1054:
    #####: 1055:    if (choice1) //+2 coins
        -: 1056:    {
    #####: 1057:      state->coins = state->coins + 2;
        -: 1058:    }
        -: 1059:
    #####: 1060:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1061:    {
        -: 1062:      //discard hand
    #####: 1063:      while (numHandCards(state) > 0)
        -: 1064:      {
    #####: 1065:        discardCard(handPos, currentPlayer, state, 0);
        -: 1066:      }
        -: 1067:
        -: 1068:      //draw 4
    #####: 1069:      for (i = 0; i < 4; i++)
        -: 1070:      {
    #####: 1071:        drawCard(currentPlayer, state);
        -: 1072:      }
        -: 1073:
        -: 1074:      //other players discard hand and redraw if hand size > 4
    #####: 1075:      for (i = 0; i < state->numPlayers; i++)
        -: 1076:      {
    #####: 1077:        if (i != currentPlayer)
        -: 1078:        {
    #####: 1079:          if (state->handCount[i] > 4)
        -: 1080:          {
        -: 1081:            //discard hand
    #####: 1082:            while (state->handCount[i] > 0)
        -: 1083:            {
    #####: 1084:              discardCard(handPos, i, state, 0);
        -: 1085:            }
        -: 1086:
        -: 1087:            //draw 4
    #####: 1088:            for (j = 0; j < 4; j++)
        -: 1089:            {
    #####: 1090:              drawCard(i, state);
        -: 1091:            }
        -: 1092:          }
        -: 1093:        }
        -: 1094:      }
        -: 1095:    }
    #####: 1096:    return 0;
        -: 1097:
    #####: 1098:  case steward:
    #####: 1099:    if (choice1 == 1)
        -: 1100:    {
        -: 1101:      //+2 cards
    #####: 1102:      drawCard(currentPlayer, state);
    #####: 1103:      drawCard(currentPlayer, state);
        -: 1104:    }
    #####: 1105:    else if (choice1 == 2)
        -: 1106:    {
        -: 1107:      //+2 coins
    #####: 1108:      state->coins = state->coins + 2;
        -: 1109:    }
        -: 1110:    else
        -: 1111:    {
        -: 1112:      //trash 2 cards in hand
    #####: 1113:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1114:      discardCard(choice3, currentPlayer, state, 1);
        -: 1115:    }
        -: 1116:
        -: 1117:    //discard card from hand
    #####: 1118:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1119:    return 0;
        -: 1120:
    #####: 1121:  case tribute:
    #####: 1122:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1123:    {
    #####: 1124:      if (state->deckCount[nextPlayer] > 0)
        -: 1125:      {
    #####: 1126:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1127:        state->deckCount[nextPlayer]--;
        -: 1128:      }
    #####: 1129:      else if (state->discardCount[nextPlayer] > 0)
        -: 1130:      {
    #####: 1131:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1132:        state->discardCount[nextPlayer]--;
        -: 1133:      }
        -: 1134:      else
        -: 1135:      {
        -: 1136:        //No Card to Reveal
        -: 1137:        if (DEBUG)
        -: 1138:        {
        -: 1139:          printf("No cards to reveal\n");
        -: 1140:        }
        -: 1141:      }
        -: 1142:    }
        -: 1143:
        -: 1144:    else
        -: 1145:    {
    #####: 1146:      if (state->deckCount[nextPlayer] == 0)
        -: 1147:      {
    #####: 1148:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1149:        {
    #####: 1150:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1151:          state->deckCount[nextPlayer]++;
    #####: 1152:          state->discard[nextPlayer][i] = -1;
    #####: 1153:          state->discardCount[nextPlayer]--;
        -: 1154:        }
        -: 1155:
    #####: 1156:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1157:      }
    #####: 1158:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1159:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1160:      state->deckCount[nextPlayer]--;
    #####: 1161:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1162:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1163:      state->deckCount[nextPlayer]--;
        -: 1164:    }
        -: 1165:
    #####: 1166:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1167:    { //If we have a duplicate card, just drop one
    #####: 1168:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1169:      state->playedCardCount++;
    #####: 1170:      tributeRevealedCards[1] = -1;
        -: 1171:    }
        -: 1172:
    #####: 1173:    for (i = 0; i <= 2; i++)
        -: 1174:    {
    #####: 1175:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1176:      { //Treasure cards
    #####: 1177:        state->coins += 2;
        -: 1178:      }
        -: 1179:
    #####: 1180:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1181:      { //Victory Card Found
    #####: 1182:        drawCard(currentPlayer, state);
    #####: 1183:        drawCard(currentPlayer, state);
        -: 1184:      }
        -: 1185:      else
        -: 1186:      { //Action Card
    #####: 1187:        state->numActions = state->numActions + 2;
        -: 1188:      }
        -: 1189:    }
        -: 1190:
    #####: 1191:    return 0;
        -: 1192:
    #####: 1193:  case ambassador:
    #####: 1194:    j = 0; //used to check if player has enough cards to discard
        -: 1195:
    #####: 1196:    if (choice2 > 2 || choice2 < 0)
        -: 1197:    {
    #####: 1198:      return -1;
        -: 1199:    }
        -: 1200:
    #####: 1201:    if (choice1 == handPos)
        -: 1202:    {
    #####: 1203:      return -1;
        -: 1204:    }
        -: 1205:
    #####: 1206:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1207:    {
    #####: 1208:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1209:      {
    #####: 1210:        j++;
        -: 1211:      }
        -: 1212:    }
    #####: 1213:    if (j < choice2)
        -: 1214:    {
    #####: 1215:      return -1;
        -: 1216:    }
        -: 1217:
        -: 1218:    if (DEBUG)
        -: 1219:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1220:
        -: 1221:    //increase supply count for choosen card by amount being discarded
    #####: 1222:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1223:
        -: 1224:    //each other player gains a copy of revealed card
    #####: 1225:    for (i = 0; i < state->numPlayers; i++)
        -: 1226:    {
    #####: 1227:      if (i != currentPlayer)
        -: 1228:      {
    #####: 1229:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1230:      }
        -: 1231:    }
        -: 1232:
        -: 1233:    //discard played card from hand
    #####: 1234:    discardCard(handPos, currentPlayer, state, 0);
        -: 1235:
        -: 1236:    //trash copies of cards returned to supply
    #####: 1237:    for (j = 0; j < choice2; j++)
        -: 1238:    {
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1240:      {
    #####: 1241:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1242:        {
    #####: 1243:          discardCard(i, currentPlayer, state, 1);
    #####: 1244:          break;
        -: 1245:        }
        -: 1246:      }
        -: 1247:    }
        -: 1248:
    #####: 1249:    return 0;
        -: 1250:
    #####: 1251:  case cutpurse:
        -: 1252:
    #####: 1253:    updateCoins(currentPlayer, state, 2);
    #####: 1254:    for (i = 0; i < state->numPlayers; i++)
        -: 1255:    {
    #####: 1256:      if (i != currentPlayer)
        -: 1257:      {
    #####: 1258:        for (j = 0; j < state->handCount[i]; j++)
        -: 1259:        {
    #####: 1260:          if (state->hand[i][j] == copper)
        -: 1261:          {
    #####: 1262:            discardCard(j, i, state, 0);
    #####: 1263:            break;
        -: 1264:          }
    #####: 1265:          if (j == state->handCount[i])
        -: 1266:          {
    #####: 1267:            for (k = 0; k < state->handCount[i]; k++)
        -: 1268:            {
        -: 1269:              if (DEBUG)
        -: 1270:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1271:            }
    #####: 1272:            break;
        -: 1273:          }
        -: 1274:        }
        -: 1275:      }
        -: 1276:    }
        -: 1277:
        -: 1278:    //discard played card from hand
    #####: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:
    #####: 1281:    return 0;
        -: 1282:
    #####: 1283:  case embargo:
        -: 1284:    //+2 Coins
    #####: 1285:    state->coins = state->coins + 2;
        -: 1286:
        -: 1287:    //see if selected pile is in play
    #####: 1288:    if (state->supplyCount[choice1] == -1)
        -: 1289:    {
    #####: 1290:      return -1;
        -: 1291:    }
        -: 1292:
        -: 1293:    //add embargo token to selected supply pile
    #####: 1294:    state->embargoTokens[choice1]++;
        -: 1295:
        -: 1296:    //trash card
    #####: 1297:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1298:    return 0;
        -: 1299:
    #####: 1300:  case outpost:
        -: 1301:    //set outpost flag
    #####: 1302:    state->outpostPlayed++;
        -: 1303:
        -: 1304:    //discard card
    #####: 1305:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1306:    return 0;
        -: 1307:
    #####: 1308:  case salvager:
        -: 1309:    //+1 buy
    #####: 1310:    state->numBuys++;
        -: 1311:
    #####: 1312:    if (choice1)
        -: 1313:    {
        -: 1314:      //gain coins equal to trashed card
    #####: 1315:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1316:      //trash card
    #####: 1317:      discardCard(choice1, currentPlayer, state, 1);
        -: 1318:    }
        -: 1319:
        -: 1320:    //discard card
    #####: 1321:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1322:    return 0;
        -: 1323:
    #####: 1324:  case sea_hag:
    #####: 1325:    for (i = 0; i < state->numPlayers; i++)
        -: 1326:    {
    #####: 1327:      if (i != currentPlayer)
        -: 1328:      {
    #####: 1329:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1330:        state->deckCount[i]--;
    #####: 1331:        state->discardCount[i]++;
    #####: 1332:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1333:      }
        -: 1334:    }
    #####: 1335:    return 0;
        -: 1336:
    #####: 1337:  case treasure_map:
        -: 1338:    //search hand for another treasure_map
    #####: 1339:    index = -1;
    #####: 1340:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1341:    {
    #####: 1342:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1343:      {
    #####: 1344:        index = i;
    #####: 1345:        break;
        -: 1346:      }
        -: 1347:    }
    #####: 1348:    if (index > -1)
        -: 1349:    {
        -: 1350:      //trash both treasure cards
    #####: 1351:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1352:      discardCard(index, currentPlayer, state, 1);
        -: 1353:
        -: 1354:      //gain 4 Gold cards
    #####: 1355:      for (i = 0; i < 4; i++)
        -: 1356:      {
    #####: 1357:        gainCard(gold, state, 1, currentPlayer);
        -: 1358:      }
        -: 1359:
        -: 1360:      //return success
    #####: 1361:      return 1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //no second treasure_map found in hand
    #####: 1365:    return -1;
        -: 1366:  }
        -: 1367:
    #####: 1368:  return -1;
        -: 1369:}
        -: 1370:
     2262: 1371:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1372:{
        -: 1373:
        -: 1374:  //if card is not trashed, added to Played pile
     2262: 1375:  if (trashFlag < 1)
        -: 1376:  {
        -: 1377:    //add card to played pile
     2262: 1378:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     2262: 1379:    state->playedCardCount++;
        -: 1380:  }
        -: 1381:
        -: 1382:  //set played card to -1
     2262: 1383:  state->hand[currentPlayer][handPos] = -1;
        -: 1384:
        -: 1385:  //remove card from player's hand
     2262: 1386:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1387:  {
        -: 1388:    //reduce number of cards in hand
        5: 1389:    state->handCount[currentPlayer]--;
        -: 1390:  }
     2257: 1391:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1392:  {
        -: 1393:    //reduce number of cards in hand
      122: 1394:    state->handCount[currentPlayer]--;
        -: 1395:  }
        -: 1396:  else
        -: 1397:  {
        -: 1398:    //replace discarded card with last card in hand
     2135: 1399:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1400:    //set last card to -1
     2135: 1401:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1402:    //reduce number of cards in hand
     2135: 1403:    state->handCount[currentPlayer]--;
        -: 1404:  }
        -: 1405:
     2262: 1406:  return 0;
        -: 1407:}
        -: 1408:
        6: 1409:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1410:{
        -: 1411:  //Note: supplyPos is enum of choosen card
        -: 1412:
        -: 1413:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1414:  if (supplyCount(supplyPos, state) < 1)
        -: 1415:  {
    #####: 1416:    return -1;
        -: 1417:  }
        -: 1418:
        -: 1419:  //added card for [whoseTurn] current player:
        -: 1420:  // toFlag = 0 : add to discard
        -: 1421:  // toFlag = 1 : add to deck
        -: 1422:  // toFlag = 2 : add to hand
        -: 1423:
        6: 1424:  if (toFlag == 1)
        -: 1425:  {
    #####: 1426:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1427:    state->deckCount[player]++;
        -: 1428:  }
        6: 1429:  else if (toFlag == 2)
        -: 1430:  {
        6: 1431:    state->hand[player][state->handCount[player]] = supplyPos;
        6: 1432:    state->handCount[player]++;
        -: 1433:  }
        -: 1434:  else
        -: 1435:  {
    #####: 1436:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1437:    state->discardCount[player]++;
        -: 1438:  }
        -: 1439:
        -: 1440:  //decrease number in supply pile
        6: 1441:  state->supplyCount[supplyPos]--;
        -: 1442:
        6: 1443:  return 0;
        -: 1444:}
        -: 1445:
     1090: 1446:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1447:{
        -: 1448:  int i;
        -: 1449:
        -: 1450:  //reset coin count
     1090: 1451:  state->coins = 0;
        -: 1452:
        -: 1453:  //add coins for each Treasure card in player's hand
     6535: 1454:  for (i = 0; i < state->handCount[player]; i++)
        -: 1455:  {
     5445: 1456:    if (state->hand[player][i] == copper)
        -: 1457:    {
     4331: 1458:      state->coins += 1;
        -: 1459:    }
     1114: 1460:    else if (state->hand[player][i] == silver)
        -: 1461:    {
       11: 1462:      state->coins += 2;
        -: 1463:    }
     1103: 1464:    else if (state->hand[player][i] == gold)
        -: 1465:    {
        9: 1466:      state->coins += 3;
        -: 1467:    }
        -: 1468:  }
        -: 1469:
        -: 1470:  //add bonus
     1090: 1471:  state->coins += bonus;
        -: 1472:
     1090: 1473:  return 0;
        -: 1474:}
        -: 1475:
        -: 1476://end of dominion.c
